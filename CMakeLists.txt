cmake_minimum_required(VERSION 3.5)

project(socstudio VERSION 0.1 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Gui Sql Widgets Svg LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Gui Sql Widgets Svg LinguistTools)

if (Qt6_FOUND)
    find_package(Qt6 COMPONENTS Core5Compat REQUIRED)
    set(Core5Compat_LIBRARIES Qt6::Core5Compat)
endif()

## SQLite3
find_package(PkgConfig REQUIRED)
pkg_check_modules(sqlite3 REQUIRED IMPORTED_TARGET sqlite3)
if(SQLite3_FOUND)
    set(SQLite3_INCLUDE_DIRS ${SQLite3_INCLUDE_DIR})
    set(SQLite3_LIBRARIES ${SQLite3_LIBRARY})
endif()

## Slang(svlang)
pkg_check_modules(slang REQUIRED IMPORTED_TARGET slang)
if (slang_FOUND)
    set(slang_INCLUDE_DIRS ${slang_INCLUDE_DIR})
    set(slang_LIBRARIES ${slang_LIBRARY})
else()
    add_subdirectory(external/slang)
    set(slang_INCLUDE_DIRS
        ${CMAKE_CURRENT_SOURCE_DIR}/external/slang/include
        ${CMAKE_CURRENT_SOURCE_DIR}/external/slang/external
    )
    set(slang_LIBRARIES svlang::svlang)
endif()

file(GLOB_RECURSE PROJECT_CPP_FILES RELATIVE ${CMAKE_CURRENT_LIST_DIR} "src/*.cpp")
file(GLOB_RECURSE PROJECT_H_FILES   RELATIVE ${CMAKE_CURRENT_LIST_DIR} "include/*.h")
file(GLOB_RECURSE PROJECT_QRC_FILES RELATIVE ${CMAKE_CURRENT_LIST_DIR} "resource/*.qrc")
file(GLOB_RECURSE PROJECT_UI_FILES  RELATIVE ${CMAKE_CURRENT_LIST_DIR} "ui/*.ui")
file(GLOB_RECURSE PROJECT_TS_FILES  RELATIVE ${CMAKE_CURRENT_LIST_DIR} "i18n/*.ts")
file(GLOB_RECURSE APPONLY_TS_FILES  RELATIVE ${CMAKE_CURRENT_LIST_DIR} "i18n/app_*.ts")

set(PROJECT_SOURCES
    ${PROJECT_CPP_FILES}
    ${PROJECT_H_FILES}
    ${PROJECT_UI_FILES}
    ${PROJECT_TS_FILES}
    ${PROJECT_QRC_FILES}
)

set(CMAKE_AUTOUIC_SEARCH_PATHS
    ${CMAKE_CURRENT_LIST_DIR}/ui
    ${CMAKE_CURRENT_LIST_DIR}/i18n
    ${CMAKE_CURRENT_LIST_DIR}/resource
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_resources(PROJECT_SOURCES ${PROJECT_QRC_FILES})
    qt_add_executable(${PROJECT_NAME}
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
    qt_add_lupdate(${PROJECT_NAME} TS_FILES ${APPONLY_TS_FILES} SOURCES ${PROJECT_CPP_FILES} ${PROJECT_H_FILES} ${PROJECT_UI_FILES})
    qt_add_lrelease(${PROJECT_NAME} TS_FILES ${PROJECT_TS_FILES} QM_FILES_OUTPUT_VARIABLE QM_FILES)
    qt_add_resources(${PROJECT_NAME} "translations" PREFIX "/i18n" BASE "${CMAKE_CURRENT_BINARY_DIR}" FILES "${QM_FILES}")
else()
    qt5_add_resources(PROJECT_SOURCES ${PROJECT_QRC_FILES})
    if(ANDROID)
        add_library(${PROJECT_NAME} SHARED
            ${PROJECT_SOURCES}
        )

    else()
        add_executable(${PROJECT_NAME}
            ${PROJECT_SOURCES}
        )
    endif()
    qt5_add_lupdate(${PROJECT_NAME} TS_FILES ${APPONLY_TS_FILES} SOURCES ${PROJECT_CPP_FILES} ${PROJECT_H_FILES} ${PROJECT_UI_FILES})
    qt5_add_lrelease(${PROJECT_NAME} TS_FILES ${PROJECT_TS_FILES} QM_FILES_OUTPUT_VARIABLE QM_FILES)
    qt5_add_resources(${PROJECT_NAME} "translations" PREFIX "/i18n" BASE "${CMAKE_CURRENT_BINARY_DIR}" FILES "${QM_FILES}")
endif()

target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${SQLite3_INCLUDE_DIRS}
    ${slang_INCLUDE_DIRS}
)

target_link_libraries(${PROJECT_NAME} PRIVATE
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Gui
    Qt${QT_VERSION_MAJOR}::Sql
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Svg
    ${Core5Compat_LIBRARIES}
    ${SQLite3_LIBRARIES}
    ${slang_LIBRARIES}
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER com.vowstar.${PROJECT_NAME}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

install(TARGETS ${PROJECT_NAME}
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(${PROJECT_NAME})
endif()
